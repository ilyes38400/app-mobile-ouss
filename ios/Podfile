# Uncomment this line to define a global platform for your project
 platform :ios, '13.0'
install! 'cocoapods', :disable_input_output_paths => true
# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks! :linkage => :static
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end
#
# target 'OneSignalNotificationServiceExtension' do
#   use_frameworks!
#   pod 'OneSignalXCFramework', '>= 5.0.0', '< 6.0'
# end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      flutter_additional_ios_build_settings(target)
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
              '$(inherited)',

              ## dart: PermissionGroup.calendar
              # 'PERMISSION_EVENTS=1',

              ## dart: PermissionGroup.reminders
              # 'PERMISSION_REMINDERS=1',

              ## dart: PermissionGroup.contacts
              # 'PERMISSION_CONTACTS=1',

              ## dart: PermissionGroup.camera
               'PERMISSION_CAMERA=1',

              ## dart: PermissionGroup.microphone
               'PERMISSION_MICROPHONE=1',

              ## dart: PermissionGroup.speech
              # 'PERMISSION_SPEECH_RECOGNIZER=1',

              ## dart: PermissionGroup.photos
               'PERMISSION_PHOTOS=1',

              ## dart: [PermissionGroup.location, PermissionGroup.locationAlways, PermissionGroup.locationWhenInUse]
               'PERMISSION_LOCATION=1',

              ## dart: PermissionGroup.notification
               'PERMISSION_NOTIFICATIONS=1',

              ## dart: PermissionGroup.mediaLibrary
              # 'PERMISSION_MEDIA_LIBRARY=1',

              ## dart: PermissionGroup.sensors
              # 'PERMISSION_SENSORS=1'
         ]
    end
  end

    # Script to strip bitcode from specific frameworks
    bitcode_strip_path = `xcrun --find bitcode_strip`.chop!

    def strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
      framework_path = File.join(Dir.pwd, framework_relative_path)
      command = "#{bitcode_strip_path} #{framework_path} -r -o #{framework_path}"
      puts "Stripping bitcode: #{command}"
      system(command)
    end

    framework_paths = [
      "Pods/Braintree/Frameworks/XCFrameworks/PPRiskMagnes.xcframework/ios-arm64/PPRiskMagnes.framework/PPRiskMagnes",
      "Pods/Braintree/Frameworks/XCFrameworks/CardinalMobile.xcframework/ios-arm64_armv7/CardinalMobile.framework/CardinalMobile",
      "symlinks/plugins/paytm/ios/AppInvokeSDK.xcframework/ios-arm64_armv7/AppInvokeSDK.framework/AppInvokeSDK"
    ]

    framework_paths.each do |framework_relative_path|
      strip_bitcode_from_framework(bitcode_strip_path, framework_relative_path)
    end
end

